package project02;

public class DatingApp02 authority (Alice,Bob,Chuck) {
	private User[Alice] aliceData;
	private Node[Alice] aliceLikes;
	private User[Bob] bobData;
	private Node[Bob] bobLikes;
	private User[Chuck] chuckData;
	private Node[Chuck] chuckLikes;

	public void updateUser{P->P}(principal {_->_}P, double {P->P} x, double {P->P} y, String {P->P} phone) where caller(P) {
		if (Alice actsfor P) {
			try{
			aliceData.positionX = x;
			aliceData.positionY = y;
			aliceData.phone = phone;
			}catch(NullPointerException e){}
			return;
		} else if (Bob actsfor P) {
			try{
			bobData.positionX = x;
			bobData.positionY = y;
			bobData.phone = phone;
			}catch(NullPointerException e){}
			return;
		} else if (Chuck actsfor P) {
			try{
			chuckData.positionX = x;
			chuckData.positionY = y;
			chuckData.phone = phone;
			}catch(NullPointerException e){}
			return;
		}
	}
	public int {P1->P1} getSquaredDistance{P1->P1}(principal {P1->P1}P1, principal {P1->P1}P2,
			User[P1] {P1->P1}data1, User[P2]{P1->P1} data2) where caller (P1) {
			
			User[P1]{P1->P1} usr;
			declassify({data2;P1->P1} to {P1->P1}) {
				usr = declassify(data2, {data2;P1->P1} to {P1->P1});
			}
			try {
				double res = (data1.positionX - usr.positionX) * (data1.positionX - usr.positionX) + (data1.positionY - usr.positionY) * (data1.positionY - usr.positionY);
				return (int)res;
			} catch (Exception e) {
				return -1;
			}
	} 
/*
	public Node[P] findNeighbours {P->P} (principal {_->_}P) where authority (Alice, Bob, Chuck) {
		User[P] originUser;
		Principal neighbour1;
		Principal neighbour2;
		if (Bob actsfor P) {
			originUser = bobData;
			neighbour1 = Alice;
			neighbour2 = Chuck;
		}
		int dist1 = getSquaredDistance(P, Alice, 
		return null;
	}
	*/
}